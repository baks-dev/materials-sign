<?php
/*
 *  Copyright 2022.  Baks.dev <admin@baks.dev>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

namespace BaksDev\Materials\Sign\Controller\Admin\Tests;

use BaksDev\Materials\Catalog\Entity\Material;
use BaksDev\Materials\Catalog\Type\Event\MaterialEventUid;
use BaksDev\Materials\Sign\Repository\CurrentEvent\MaterialSignCurrentEventInterface;
use BaksDev\Materials\Sign\Type\Id\MaterialSignUid;
use BaksDev\Users\User\Tests\TestUserAccount;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\DependencyInjection\Attribute\When;


#[When(env: 'test')]
final class StatusControllerTest extends WebTestCase
{
    private const string URL = '/admin/material/sign/status/%s';
    private const string ROLE = 'ROLE_MATERIAL_SIGN_STATUS';

    private static ?MaterialEventUid $identifier;

    public static function setUpBeforeClass(): void
    {
        /** @var MaterialSignCurrentEventInterface $service */
        $service = self::getContainer()->get(MaterialSignCurrentEventInterface::class);
        $service->findMaterialSignEvent(MaterialSignUid::TEST);

        $em = self::getContainer()->get(EntityManagerInterface::class);
        self::$identifier = $em->getRepository(Material::class)->findOneBy([], ['id' => 'DESC'])?->getEvent();

        $em->clear();
        //$em->close();
    }



    /** Доступ по роли */
    public function testRoleSuccessful(): void
    {
        // Получаем одно из событий
        $Event = self::$identifier;

        if ($Event) {

            self::ensureKernelShutdown();
            $client = static::createClient();

            $usr = TestUserAccount::getModer(self::ROLE);

            $client->loginUser($usr, 'user');
            $client->request('GET', sprintf(self::URL, $Event->getValue()));

            self::assertResponseIsSuccessful();
        }

        self::assertTrue(true);
    }

    // доступ по роли ROLE_ADMIN
    public function testRoleAdminSuccessful(): void
    {

        // Получаем одно из событий
        $Event = self::$identifier;

        if ($Event) {

            self::ensureKernelShutdown();
            $client = static::createClient();

            $usr = TestUserAccount::getAdmin();

            $client->loginUser($usr, 'user');
            $client->request('GET', sprintf(self::URL, $Event->getValue()));

            self::assertResponseIsSuccessful();
        }

        self::assertTrue(true);
    }

    // доступ по роли ROLE_USER
    public function testRoleUserDeny(): void
    {

        // Получаем одно из событий
        $Event = self::$identifier;

        if ($Event) {

            self::ensureKernelShutdown();
            $client = static::createClient();

            $usr = TestUserAccount::getUsr();
            $client->loginUser($usr, 'user');
            $client->request('GET', sprintf(self::URL, $Event->getValue()));

            self::assertResponseStatusCodeSame(403);
        }

        self::assertTrue(true);
    }

    /** Доступ по без роли */
    public function testGuestFiled(): void
    {
        // Получаем одно из событий
        $Event = self::$identifier;

        if ($Event) {
            self::ensureKernelShutdown();
            $client = static::createClient();
            $client->request('GET', sprintf(self::URL, $Event->getValue()));

            // Full authentication is required to access this resource
            self::assertResponseStatusCodeSame(401);
        }

        self::assertTrue(true);
    }
}
